package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ReportInterventionListAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportInterventionListAllPropertiesEquals(ReportInterventionList expected, ReportInterventionList actual) {
        assertReportInterventionListAutoGeneratedPropertiesEquals(expected, actual);
        assertReportInterventionListAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportInterventionListAllUpdatablePropertiesEquals(
        ReportInterventionList expected,
        ReportInterventionList actual
    ) {
        assertReportInterventionListUpdatableFieldsEquals(expected, actual);
        assertReportInterventionListUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportInterventionListAutoGeneratedPropertiesEquals(
        ReportInterventionList expected,
        ReportInterventionList actual
    ) {
        assertThat(expected)
            .as("Verify ReportInterventionList auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportInterventionListUpdatableFieldsEquals(ReportInterventionList expected, ReportInterventionList actual) {
        assertThat(expected)
            .as("Verify ReportInterventionList relevant properties")
            .satisfies(e -> assertThat(e.getSite()).as("check site").isEqualTo(actual.getSite()))
            .satisfies(e -> assertThat(e.getCodeAgence()).as("check codeAgence").isEqualTo(actual.getCodeAgence()))
            .satisfies(e -> assertThat(e.getAffaireNumber()).as("check affaireNumber").isEqualTo(actual.getAffaireNumber()))
            .satisfies(e -> assertThat(e.getContractNumber()).as("check contractNumber").isEqualTo(actual.getContractNumber()))
            .satisfies(e -> assertThat(e.getInstallationAdress()).as("check installationAdress").isEqualTo(actual.getInstallationAdress()))
            .satisfies(
                e ->
                    assertThat(e.getInterlocuteurIntervation())
                        .as("check interlocuteurIntervation")
                        .isEqualTo(actual.getInterlocuteurIntervation())
            )
            .satisfies(e -> assertThat(e.getTel()).as("check tel").isEqualTo(actual.getTel()))
            .satisfies(
                e ->
                    assertThat(e.getInstallationSousContract())
                        .as("check installationSousContract")
                        .isEqualTo(actual.getInstallationSousContract())
            )
            .satisfies(
                e ->
                    assertThat(e.getInstallationSousGarantie())
                        .as("check installationSousGarantie")
                        .isEqualTo(actual.getInstallationSousGarantie())
            )
            .satisfies(e -> assertThat(e.getAdressFacturation()).as("check adressFacturation").isEqualTo(actual.getAdressFacturation()))
            .satisfies(
                e ->
                    assertThat(e.getInterlocuteurFacturation())
                        .as("check interlocuteurFacturation")
                        .isEqualTo(actual.getInterlocuteurFacturation())
            )
            .satisfies(
                e ->
                    assertThat(e.getConditionDePayementCheque())
                        .as("check conditionDePayementCheque")
                        .isEqualTo(actual.getConditionDePayementCheque())
            )
            .satisfies(
                e ->
                    assertThat(e.getConditionPayementAutre())
                        .as("check conditionPayementAutre")
                        .isEqualTo(actual.getConditionPayementAutre())
            )
            .satisfies(
                e ->
                    assertThat(e.getConditionPayementComment())
                        .as("check conditionPayementComment")
                        .isEqualTo(actual.getConditionPayementComment())
            )
            .satisfies(
                e ->
                    assertThat(e.getMiseEnServiceDefinitvie())
                        .as("check miseEnServiceDefinitvie")
                        .isEqualTo(actual.getMiseEnServiceDefinitvie())
            )
            .satisfies(
                e ->
                    assertThat(e.getMiseEnServicePartielle())
                        .as("check miseEnServicePartielle")
                        .isEqualTo(actual.getMiseEnServicePartielle())
            )
            .satisfies(
                e -> assertThat(e.getMaintenancePreventive()).as("check maintenancePreventive").isEqualTo(actual.getMaintenancePreventive())
            )
            .satisfies(
                e -> assertThat(e.getMaintenanceCorrective()).as("check maintenanceCorrective").isEqualTo(actual.getMaintenanceCorrective())
            )
            .satisfies(e -> assertThat(e.getbT()).as("check bT").isEqualTo(actual.getbT()))
            .satisfies(e -> assertThat(e.getAnomalieSignalee()).as("check anomalieSignalee").isEqualTo(actual.getAnomalieSignalee()))
            .satisfies(e -> assertThat(e.getInterventionDate()).as("check interventionDate").isEqualTo(actual.getInterventionDate()))
            .satisfies(
                e -> assertThat(e.getInterventionStartDate()).as("check interventionStartDate").isEqualTo(actual.getInterventionStartDate())
            )
            .satisfies(e -> assertThat(e.getRemiseServiceDate()).as("check remiseServiceDate").isEqualTo(actual.getRemiseServiceDate()))
            .satisfies(e -> assertThat(e.getEndDate()).as("check endDate").isEqualTo(actual.getEndDate()))
            .satisfies(e -> assertThat(e.getNatureIntervention()).as("check natureIntervention").isEqualTo(actual.getNatureIntervention()))
            .satisfies(
                e ->
                    assertThat(e.getCauseExterieurInstallation())
                        .as("check causeExterieurInstallation")
                        .isEqualTo(actual.getCauseExterieurInstallation())
            )
            .satisfies(
                e ->
                    assertThat(e.getInstallationFonctionnelleApresInervention())
                        .as("check installationFonctionnelleApresInervention")
                        .isEqualTo(actual.getInstallationFonctionnelleApresInervention())
            )
            .satisfies(
                e ->
                    assertThat(e.getAutreInterventionsAPrevoir())
                        .as("check autreInterventionsAPrevoir")
                        .isEqualTo(actual.getAutreInterventionsAPrevoir())
            )
            .satisfies(e -> assertThat(e.getClientApreciation()).as("check clientApreciation").isEqualTo(actual.getClientApreciation()))
            .satisfies(e -> assertThat(e.getRespectDelais()).as("check respectDelais").isEqualTo(actual.getRespectDelais()))
            .satisfies(
                e -> assertThat(e.getQualiteIntervention()).as("check qualiteIntervention").isEqualTo(actual.getQualiteIntervention())
            )
            .satisfies(
                e -> assertThat(e.getQualiteDevoirConseil()).as("check qualiteDevoirConseil").isEqualTo(actual.getQualiteDevoirConseil())
            )
            .satisfies(
                e -> assertThat(e.getPrestationsAchevees()).as("check prestationsAchevees").isEqualTo(actual.getPrestationsAchevees())
            )
            .satisfies(e -> assertThat(e.getDevisComplentaire()).as("check devisComplentaire").isEqualTo(actual.getDevisComplentaire()))
            .satisfies(e -> assertThat(e.getTechnicienName()).as("check technicienName").isEqualTo(actual.getTechnicienName()))
            .satisfies(e -> assertThat(e.getCodeTechnicien()).as("check codeTechnicien").isEqualTo(actual.getCodeTechnicien()))
            .satisfies(
                e -> assertThat(e.getValidationClientName()).as("check validationClientName").isEqualTo(actual.getValidationClientName())
            )
            .satisfies(
                e ->
                    assertThat(e.getValidationNameFunction())
                        .as("check validationNameFunction")
                        .isEqualTo(actual.getValidationNameFunction())
            )
            .satisfies(
                e -> assertThat(e.getValidationClientDate()).as("check validationClientDate").isEqualTo(actual.getValidationClientDate())
            )
            .satisfies(e -> assertThat(e.getBonPourCommand()).as("check bonPourCommand").isEqualTo(actual.getBonPourCommand()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getValidation()).as("check validation").isEqualTo(actual.getValidation()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportInterventionListUpdatableRelationshipsEquals(
        ReportInterventionList expected,
        ReportInterventionList actual
    ) {}
}
