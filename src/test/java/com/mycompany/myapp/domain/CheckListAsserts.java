package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CheckListAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCheckListAllPropertiesEquals(CheckList expected, CheckList actual) {
        assertCheckListAutoGeneratedPropertiesEquals(expected, actual);
        assertCheckListAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCheckListAllUpdatablePropertiesEquals(CheckList expected, CheckList actual) {
        assertCheckListUpdatableFieldsEquals(expected, actual);
        assertCheckListUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCheckListAutoGeneratedPropertiesEquals(CheckList expected, CheckList actual) {
        assertThat(expected)
            .as("Verify CheckList auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCheckListUpdatableFieldsEquals(CheckList expected, CheckList actual) {
        assertThat(expected)
            .as("Verify CheckList relevant properties")
            .satisfies(e -> assertThat(e.getClient()).as("check client").isEqualTo(actual.getClient()))
            .satisfies(e -> assertThat(e.getContractNumber()).as("check contractNumber").isEqualTo(actual.getContractNumber()))
            .satisfies(e -> assertThat(e.getAdress()).as("check adress").isEqualTo(actual.getAdress()))
            .satisfies(e -> assertThat(e.getTechnicienDef()).as("check technicienDef").isEqualTo(actual.getTechnicienDef()))
            .satisfies(e -> assertThat(e.getDate()).as("check date").isEqualTo(actual.getDate()))
            .satisfies(
                e ->
                    assertThat(e.getTableDetectionTaskStatus())
                        .as("check tableDetectionTaskStatus")
                        .isEqualTo(actual.getTableDetectionTaskStatus())
            )
            .satisfies(
                e -> assertThat(e.getTableDetectionComment()).as("check tableDetectionComment").isEqualTo(actual.getTableDetectionComment())
            )
            .satisfies(e -> assertThat(e.getDiDMTaskStatus()).as("check diDMTaskStatus").isEqualTo(actual.getDiDMTaskStatus()))
            .satisfies(e -> assertThat(e.getDiDMComment()).as("check diDMComment").isEqualTo(actual.getDiDMComment()))
            .satisfies(
                e ->
                    assertThat(e.getDetecteursPonctuelsTaskStatus())
                        .as("check detecteursPonctuelsTaskStatus")
                        .isEqualTo(actual.getDetecteursPonctuelsTaskStatus())
            )
            .satisfies(
                e ->
                    assertThat(e.getDetecteursPonctuelsComment())
                        .as("check detecteursPonctuelsComment")
                        .isEqualTo(actual.getDetecteursPonctuelsComment())
            )
            .satisfies(
                e ->
                    assertThat(e.getDeclencheurManuelsTaskStatus())
                        .as("check declencheurManuelsTaskStatus")
                        .isEqualTo(actual.getDeclencheurManuelsTaskStatus())
            )
            .satisfies(
                e ->
                    assertThat(e.getDeclencheurManuelsComment())
                        .as("check declencheurManuelsComment")
                        .isEqualTo(actual.getDeclencheurManuelsComment())
            )
            .satisfies(
                e ->
                    assertThat(e.getTableMiseSecurityIncendieTaskStatus())
                        .as("check tableMiseSecurityIncendieTaskStatus")
                        .isEqualTo(actual.getTableMiseSecurityIncendieTaskStatus())
            )
            .satisfies(
                e ->
                    assertThat(e.getTableMiseSecurityIncendieComment())
                        .as("check tableMiseSecurityIncendieComment")
                        .isEqualTo(actual.getTableMiseSecurityIncendieComment())
            )
            .satisfies(
                e ->
                    assertThat(e.getAlimentationSecoursTaskStatus())
                        .as("check alimentationSecoursTaskStatus")
                        .isEqualTo(actual.getAlimentationSecoursTaskStatus())
            )
            .satisfies(
                e ->
                    assertThat(e.getAlimentationSecoursComment())
                        .as("check alimentationSecoursComment")
                        .isEqualTo(actual.getAlimentationSecoursComment())
            )
            .satisfies(
                e ->
                    assertThat(e.getEquipementAlarmeTaskStatus())
                        .as("check equipementAlarmeTaskStatus")
                        .isEqualTo(actual.getEquipementAlarmeTaskStatus())
            )
            .satisfies(
                e ->
                    assertThat(e.getEquipementAlarmeComment())
                        .as("check equipementAlarmeComment")
                        .isEqualTo(actual.getEquipementAlarmeComment())
            )
            .satisfies(e -> assertThat(e.getDasTaskStatus()).as("check dasTaskStatus").isEqualTo(actual.getDasTaskStatus()))
            .satisfies(e -> assertThat(e.getDasComment()).as("check dasComment").isEqualTo(actual.getDasComment()))
            .satisfies(
                e ->
                    assertThat(e.getArretTechniqueTaskStatus())
                        .as("check arretTechniqueTaskStatus")
                        .isEqualTo(actual.getArretTechniqueTaskStatus())
            )
            .satisfies(
                e -> assertThat(e.getArretTechniqueComment()).as("check arretTechniqueComment").isEqualTo(actual.getArretTechniqueComment())
            )
            .satisfies(e -> assertThat(e.getBaiePcsTaskStatus()).as("check baiePcsTaskStatus").isEqualTo(actual.getBaiePcsTaskStatus()))
            .satisfies(e -> assertThat(e.getBaiePCScomment()).as("check baiePCScomment").isEqualTo(actual.getBaiePCScomment()))
            .satisfies(
                e -> assertThat(e.getSuperviseurTaskStatus()).as("check superviseurTaskStatus").isEqualTo(actual.getSuperviseurTaskStatus())
            )
            .satisfies(e -> assertThat(e.getSuperviseurComment()).as("check superviseurComment").isEqualTo(actual.getSuperviseurComment()))
            .satisfies(e -> assertThat(e.getValidate()).as("check validate").isEqualTo(actual.getValidate()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCheckListUpdatableRelationshipsEquals(CheckList expected, CheckList actual) {}
}
